using UnityEngine;
using System.Collections;
using UnityEngine.UI;
using System.Linq;

public class RandomSpeech : MonoBehaviour
{
	[SerializeField]
	[Header("?e?L?X?g?I?u?W?F?N?g")]
	Text speechText;

	[SerializeField]
	[Header("?????????I?u?W?F?N?g")]
	GameObject speechPanel;

	[SerializeField]
	[Header("?Z???t????")]
	private string[] speeches;

	// ?????U???????????????@????
	[SerializeField]
	[Header("?????U????????????????")]
	float nextWaitingTime = 10.0f;

	// ???????????\????????????
	[SerializeField]
	[Header("???????????????????????")]
	float speakingTime = 1.5f;

	// ?^?C?}?[
	[SerializeField]
	[Header("????????")]
	private float limitTime = 60;       // ?{???????????????Q?[???}?l?[?W???[??????????????

	bool isWatching = false;

	public bool IsWatching()
	{
		return isWatching;
	}

	void Start()
    {
		StartCoroutine(PlayRandomSpeak());
	}

	public IEnumerator PlayRandomSpeak()
	{
		while (limitTime > 0)                                        // ???????????????[?v????
		{
			yield return null;
			limitTime -= Time.deltaTime;                            // ?o???????????Z
			yield return StartCoroutine(NextRandomSpeak());			// ????
		}
	}

	IEnumerator NextRandomSpeak()
	{
		float timer = 0;
		while (nextWaitingTime > timer)
		{
			yield return null;               // ???@
			timer += Time.deltaTime;         // ?^?C?}?[?????Z
		}
		//speechPanel.SetActive(true);
		isWatching = true;
		speechText.text = speeches.ElementAt(Random.Range(0, speeches.Count()));    // ?????_?????e?L?X?g?????f
		timer = 0;
		while (speakingTime > timer)
		{
			yield return null;               // ???@
			timer += Time.deltaTime;         // ?^?C?}?[?????Z
		}
		//speechPanel.SetActive(false);
		isWatching = false;
	}
}
